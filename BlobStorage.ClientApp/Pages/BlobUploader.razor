@using BlobStorage.Shared
@using BlobStorage.Shared.Models
@using System.Text.RegularExpressions
@using System.Text.Json
@using System.Text

@inject HttpClient httpClient

<h3>BlobUploader</h3>

<div class="container">
    <div class="flex-column">
        <div class="input-group mb-3">
            <span class="input-group-text" id="basic-addon1">Email</span>
            <input class="form-control" @bind="EmailInput" @bind:event="oninput" @onkeyup="ValidateEmail" placeholder="example@dom.ex">
        </div>
        <div class="input-group mb-3">
            <InputFile class="form-control" OnChange="LoadFile" accept=".docx" />
            <button class="btn btn-primary" @onclick="TryUpload" >Upload</button>
        </div>
        @if (!IsEmailInputValid)
        {
            <div class="text-danger m-1 border-1">Please, check out the email field.</div>
        }
        @if (!IsFileValid)
        {
            <div class="text-danger m-1 border-1">Check the file type and path!</div>
        }
    </div>
</div>
<Modal @ref="resultModal" />

@code {
    private string EmailInput { get; set; } = String.Empty;
    private string FileName { get; set; } = String.Empty;
    private BinaryData binaryData;
    private bool IsFileValid { get; set; } = true;
    private bool IsEmailInputValid { get; set; } = true;

    private Modal resultModal = default!;

    private bool IsEmailValid(string email)
    {
        Regex emailRegex = new Regex(@"^[\w-]+(\.[\w-]+)*@([\w-]+\.)+[a-zA-Z]{2,7}$");
        return emailRegex.IsMatch(email);
    }

    private bool IsTypeOfFileDocx(string fileName)
    {
        return Path.GetExtension(fileName) == FileExtensions.Docx;
    }

    private void ValidateEmail()
    {
        IsEmailInputValid = IsEmailValid(EmailInput);
    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        FileName = e.File.Name;
        IsFileValid = IsTypeOfFileDocx(FileName);
        try
        {
            using FileStream fs = new FileStream(Path.GetTempFileName(), FileMode.Create);
            await e.File.OpenReadStream().CopyToAsync(fs);
            fs.Seek(0, SeekOrigin.Begin);
            BinaryReader reader = new BinaryReader(fs);

            byte[] buffer = new byte[fs.Length];
            reader.Read(buffer, 0, buffer.Length);
            binaryData = new BinaryData(buffer);
        }
        catch (IOException)
        {
            IsFileValid = false;
            await ShowModal(
                title: "Error occured!",
                message: "It seems like there is a problem with your file.");
        }
    }
    private async Task ShowModal(string title, string message)
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("Message", message);
        await resultModal.ShowAsync<ResultModal>(title: title, parameters: parameters);
    }

    private async Task TryUpload()
    {
        IsEmailInputValid = IsEmailValid(EmailInput);
        IsFileValid = IsTypeOfFileDocx(FileName);

        if (IsEmailInputValid && IsFileValid)
        {
            var response = await httpClient.PostAsJsonAsync(
                String.Concat(
                    httpClient.BaseAddress,
                    "api/Blob"
                ),
                new BlobUploadRequestDto(
                    EmailInput,
                    FileName,
                    binaryData
                )
            );
            if(response.IsSuccessStatusCode)
            {
                await ShowModal(
                    title: "Congratulations!",
                    message: "Request sent, email is going.");
            }
            else
            {
                await ShowModal(
                    title: "Upps!",
                    message: $"We have got some trouble, please check the form.(status: {response.StatusCode})");
            }
        }
    }
}